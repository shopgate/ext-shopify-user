{
	"info": {
		"_postman_id": "24422885-4cf6-4476-bd2a-cb1d5778bde5",
		"name": "Shopify Connect - User",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Errors: unauthorized",
			"item": [
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9cf418a-ecb3-4a21-91b5-b132c7c4ea7c",
								"exec": [
									"// doesn't matter if we succeed, this just clears previous states",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_logout}}",
							"host": [
								"{{domain}}{{endpoint_user_logout}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot retrieve data\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b489029a-ab45-4670-b69b-eb4277dfa856",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot update data\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cce257bd-f80f-470f-a0b3-1f4a07aa84f5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_update}}",
							"host": [
								"{{domain}}{{endpoint_user_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateMail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b489029a-ab45-4670-b69b-eb4277dfa856",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot update data\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cce257bd-f80f-470f-a0b3-1f4a07aa84f5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"mail\": \"test@shopgate.com\" \n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_email_update}}",
							"host": [
								"{{domain}}{{endpoint_user_email_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b489029a-ab45-4670-b69b-eb4277dfa856",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot update data\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cce257bd-f80f-470f-a0b3-1f4a07aa84f5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"test\",\n\t\"oldPassword\": \"test2\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_password_update}}",
							"host": [
								"{{domain}}{{endpoint_user_password_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAddresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in, cannot get address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_user_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot add address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"street1\": \"\",\n    \"zipCode\": \"\",\n    \"city\": \"\",\n    \"country\": \"US\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_address_add}}",
							"host": [
								"{{domain}}{{endpoint_user_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot update address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\":\"1\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_address_update}}",
							"host": [
								"{{domain}}{{endpoint_user_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteAddresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot delete addresses\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\": [\n\t\t\"1\"\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
							"host": [
								"{{domain}}{{endpoint_user_addresses_delete}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "getUser",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"strategy\": \"basic\",\n\t\"parameters\": {\n\t\t\"login\": \"{{username}}\",\n\t\t\"password\": \"{{password}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_login}}",
							"host": [
								"{{domain}}{{endpoint_user_login}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "612cbbbf-5a9e-4cc7-b701-b4fd66544411",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.with.body;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response have minimum return values\", function() {",
									"    var response = pm.response.json()",
									"    pm.expect(response.id).to.not.be.empty;",
									"    pm.expect(response.firstName).to.not.be.empty;",
									"    pm.expect(response.lastName).to.not.be.empty;",
									"    pm.expect(response.mail).to.not.be.empty;",
									"    pm.expect(response.customAttributes).to.be.a('object');",
									"    pm.expect(response.userGroups).to.be.a('array')",
									"    pm.response.to.not.have.jsonBody(\"addresses\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "updateUser",
			"item": [
				{
					"name": "Errors",
					"item": [
						{
							"name": "no input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49674fc5-9e17-42a8-ab66-575229270df5",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because all inputs were missing\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "742173d7-84fb-4207-85ae-a7e93e6fb17c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_update}}",
									"host": [
										"{{domain}}{{endpoint_user_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "email invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b44c90ca-48c9-4486-a4ed-1053aeb29a15",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because email was malformed\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Correct email error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('email');",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "742173d7-84fb-4207-85ae-a7e93e6fb17c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"customAttributes\": {\n\t\t\"email\": \"invalidmailformat\"\t\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_update}}",
									"host": [
										"{{domain}}{{endpoint_user_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "phone invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8404ac01-e0dc-4616-a787-a5ce1464a345",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because phone was malformed\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Correct phone error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('phone');",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "742173d7-84fb-4207-85ae-a7e93e6fb17c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"customAttributes\": {\n\t\t\"phone\": \"invalidphoneformat\"\t\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_update}}",
									"host": [
										"{{domain}}{{endpoint_user_update}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e19c85f2-0033-4b62-86b1-b088f4411bb4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "064b68e5-42a4-496b-9159-f433d3daab02",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "update simple data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f1dbd16-cd35-46ad-8414-547ac9c5141a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "372abd2d-4751-42fa-9d2d-fedabb295bef",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"user-\" + Math.floor(Math.random() * Math.floor(1000)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": \"{{seed}}-firstname\",\n    \"lastName\": \"{{seed}}-lastname\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_update}}",
							"host": [
								"{{domain}}{{endpoint_user_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check updated data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12eb378a-97e0-4f9f-800d-c936ff0f1040",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.with.body;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Data was updated\", function() {",
									"    var response = pm.response.json()",
									"    pm.expect(response.firstName).to.eql(pm.environment.get(\"seed\") + \"-firstname\");",
									"    pm.expect(response.lastName).to.eql(pm.environment.get(\"seed\") + \"-lastname\");",
									"    ",
									"    pm.environment.set(\"updated-firstname\", response.firstName);",
									"    pm.environment.set(\"updated-lastname\", response.lastName);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update customAttributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f1dbd16-cd35-46ad-8414-547ac9c5141a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2a043704-a011-4b22-a58c-3bb80a05ae54",
								"exec": [
									"// generate a valid looking phone number",
									"pm.environment.set(\"phone-seed\", \"+1618654\" + Math.floor(1000 + Math.random() * 9000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"customAttributes\": {\n\t\t\"phone\": \"{{phone-seed}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_update}}",
							"host": [
								"{{domain}}{{endpoint_user_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check updated customAttributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80ef02b0-cb5d-41f6-8ed5-cc89299aa474",
								"exec": [
									"var response = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.with.body;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Data was updated\", function() {",
									"    pm.expect(response.customAttributes.phone).to.eql(pm.environment.get(\"phone-seed\"));",
									"})",
									"",
									"pm.test(\"Firstname and lastname has NOT been updated\", function() {",
									"    pm.expect(response.firstName).to.eql(pm.environment.get(\"updated-firstname\"));",
									"    pm.expect(response.lastName).to.eql(pm.environment.get(\"updated-lastname\"));",
									"})",
									"",
									"pm.environment.unset(\"updated-firstname\");",
									"pm.environment.unset(\"updated-lastname\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e52b83a3-53e4-45a2-99f1-ce504e3d204f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "64ca7770-e8b9-4c28-ab8f-da2332edd36b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "updatePassword",
			"item": [
				{
					"name": "Errors",
					"item": [
						{
							"name": "empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "035be69a-24c9-4837-9fcc-d8446acff32d",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because all inputs were missing\", function () {",
											"    pm.expect(jsonData.error.code).to.eql(\"EVALIDATION\");",
											"});",
											"",
											"pm.test(\"Correct validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.eq(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    });",
											"});",
											"",
											"pm.test(\"Ccorrect path errors are shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq(\"password\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty password with oldPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e8d378c-162c-44bf-828a-72a75a173c42",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because all inputs were missing\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test('Correct validation error structure', function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.eq(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    });",
											"});",
											"",
											"pm.test('Ccorrect path errors are shown', function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('password');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"\",\n\t\"oldPassword\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong old password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68ba37a2-6f5e-4898-97be-6825e050a814",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test('Bad credentials provided', function() {",
											"    pm.expect(jsonData.error.code).to.be.eq('EINVALIDCREDENTIALS');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88a7a37a-3613-4b5f-90d3-7866eb682dfd",
										"exec": [
											"pm.environment.set('temp-password', pm.environment.get('password') + '-12345');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"oldPassword\": \"notrealpassword\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty old password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94e09a43-1886-461a-89a7-3cd5b098c343",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because all inputs were missing\", function () {",
											"    pm.expect(jsonData.error.code).to.eql(\"EVALIDATION\");",
											"});",
											"",
											"pm.test(\"Correct validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.eq(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    });",
											"});",
											"",
											"pm.test(\"Ccorrect path errors are shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq(\"oldPassword\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a650af8-a5cc-491d-93c4-3d3054d2853d",
										"exec": [
											"pm.environment.set('temp-password', pm.environment.get('password') + '-12345');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"oldPassword\": \"\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Without old password",
					"item": [
						{
							"name": "update password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec8d5938-de45-46b3-95a8-df38c6ba1226",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88a7a37a-3613-4b5f-90d3-7866eb682dfd",
										"exec": [
											"pm.environment.set('temp-password', pm.environment.get('password') + '-12345');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{temp-password}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "cannot get customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e552004-891e-49bb-a719-ab3a6eae98ad",
										"type": "text/javascript",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test('User not logged in error', function() {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_get}}",
									"host": [
										"{{domain}}{{endpoint_user_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "cannot login with old",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0aa4f4f-2309-4e14-b5ee-fbbfa03b51e9",
										"type": "text/javascript",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test('Bad credentials provided', function() {",
											"    pm.expect(jsonData.error.code).to.be.eq('EINVALIDCREDENTIALS');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_login}}",
									"host": [
										"{{domain}}{{endpoint_user_login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with new",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f781017-7f23-4431-8e50-c1fb3cd115cb",
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{temp-password}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_login}}",
									"host": [
										"{{domain}}{{endpoint_user_login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "reset pass + cleanup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06ed9d1a-fffe-43f4-9b2e-6586267f02dd",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.unset('temp-password');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "380aa0c2-0445-4253-b8fd-c8ae3f6a2801",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "With old password",
					"item": [
						{
							"name": "update password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec8d5938-de45-46b3-95a8-df38c6ba1226",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88a7a37a-3613-4b5f-90d3-7866eb682dfd",
										"exec": [
											"pm.environment.set('temp-password', pm.environment.get('password') + '-12345');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{temp-password}}\",\n\t\"oldPassword\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "cannot get customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e552004-891e-49bb-a719-ab3a6eae98ad",
										"type": "text/javascript",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test('User not logged in error', function() {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_get}}",
									"host": [
										"{{domain}}{{endpoint_user_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "cannot login with old",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0aa4f4f-2309-4e14-b5ee-fbbfa03b51e9",
										"type": "text/javascript",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test('Bad credentials provided', function() {",
											"    pm.expect(jsonData.error.code).to.be.eq('EINVALIDCREDENTIALS');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_login}}",
									"host": [
										"{{domain}}{{endpoint_user_login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with new",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f781017-7f23-4431-8e50-c1fb3cd115cb",
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{temp-password}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_login}}",
									"host": [
										"{{domain}}{{endpoint_user_login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "reset pass + cleanup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06ed9d1a-fffe-43f4-9b2e-6586267f02dd",
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.unset('temp-password');"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "380aa0c2-0445-4253-b8fd-c8ae3f6a2801",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"oldPassword\": \"{{temp-password}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0626dd98-f039-4075-8e70-cfd35c2062bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6240e28f-97cf-4090-ad52-f5de36a206f1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e1097d30-88a8-4685-8914-365ecef471ae",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "88628adc-16a4-4995-a4dd-73ed5355e163",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "updateMail",
			"item": [
				{
					"name": "Errors",
					"item": [
						{
							"name": "wrong email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a54217f2-9b2e-48a6-95de-870fb838e93d",
										"type": "text/javascript",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test('Code is EVALIDATION', function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test('Incorrect validation error structure', function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.eq(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    });",
											"});",
											"",
											"pm.test('Incorrect path errors are shown', function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('email');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"mail\": \"wrongmailformat\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_email_update}}",
									"host": [
										"{{domain}}{{endpoint_user_email_update}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "update email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec8d5938-de45-46b3-95a8-df38c6ba1226",
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15b92979-0a22-42b2-8133-f5a3e922dcc2",
								"exec": [
									"pm.environment.set('temp-email', '12345-' + pm.variables.get('username'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"mail\": \"{{temp-email}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_email_update}}",
							"host": [
								"{{domain}}{{endpoint_user_email_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check updated email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaf52781-ee12-4c05-9c53-6f7c1b64f734",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.with.body;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Email has been updated\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.mail).to.eql(pm.environment.get(\"temp-email\"));",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "customerLogout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_logout}}",
							"host": [
								"{{domain}}{{endpoint_user_logout}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "customerLogin",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{temp-email}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_login}}",
							"host": [
								"{{domain}}{{endpoint_user_login}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset email + cleanup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02c16eb8-379a-4557-bfde-c45642657ee1",
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.unset('temp-email');"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "380aa0c2-0445-4253-b8fd-c8ae3f6a2801",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"mail\": \"{{username}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_email_update}}",
							"host": [
								"{{domain}}{{endpoint_user_email_update}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e7ac9d42-e9d7-4711-ad81-14d5f8a27d6f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f31e6824-9fd3-4604-9ae2-47b0112bce02",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "addAddress",
			"item": [
				{
					"name": "Errors",
					"item": [
						{
							"name": "bad country name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ee906d5-039e-4111-8582-561c4969c4bd",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct country error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('Country is not a valid country');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"street1\": \"\",\n    \"zipCode\": \"\",\n    \"city\": \"\",\n    \"country\": \"TESTER\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_add}}",
									"host": [
										"{{domain}}{{endpoint_user_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "country is required",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce9b0c95-f899-4cb8-952d-9c31582ced58",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct country error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('Country is required');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"street1\": \"\",\n    \"zipCode\": \"\",\n    \"city\": \"\",\n    \"country\": \"\",\n    \"province\": \"{{seed}}-province\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_add}}",
									"host": [
										"{{domain}}{{endpoint_user_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "incorrect province",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93e2f36f-3992-4e5e-b5a4-4d16f8361856",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct province error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('province');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('Province is not valid');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"street1\": \"\",\n    \"zipCode\": \"\",\n    \"city\": \"\",\n    \"country\": \"US\",\n    \"province\": \"{{seed}}-province\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_add}}",
									"host": [
										"{{domain}}{{endpoint_user_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create GB address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"TEST\",\n    \"lastName\": \"USER\",\n    \"street1\": \"TEST ADDRESS\",\n    \"zipCode\": \"12345\",\n    \"city\": \"Gotham\",\n    \"country\": \"GB\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_add}}",
									"host": [
										"{{domain}}{{endpoint_user_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb4159fe-98b9-41d5-9642-52e2cfbe36a7",
										"exec": [
											"var jsonData = pm.response.json();",
                                          "pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
                                          "    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
                                          "pm.test(\"Correct duplicate error is shown\", function () {",
                                          "    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('Address already exists for customer');",
                                          "});",
                                          "",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"TEST\",\n    \"lastName\": \"USER\",\n    \"street1\": \"TEST ADDRESS\",\n    \"zipCode\": \"12345\",\n    \"city\": \"Gotham\",\n    \"country\": \"GB\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_add}}",
									"host": [
										"{{domain}}{{endpoint_user_address_add}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add: all field mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": \"{{seed}}-firstname\",\n\t\"lastName\": \"{{seed}}-lastname\",\n\t\"street1\": \"{{seed}}-street1\",\n\t\"street2\": \"{{seed}}-street2\",\n\t\"city\": \"{{seed}}-city\",\n\t\"zipCode\": \"{{seed}}-zipCode\",\n\t\"country\": \"US\",\n\t\"province\":\"Arizona\",\n\t\"customAttributes\": {\n\t\t\"company\": \"{{seed}}-company\",\n\t\t\"phone\": \"{{seed}}-phone\"\n\t},\n\t\"tags\": [\n\t\t\"default\"\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_address_add}}",
							"host": [
								"{{domain}}{{endpoint_user_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get: check all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6120e65f-de6f-48fd-99d1-660ff34847b6",
								"exec": [
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.find(function(el) {",
									"        return el.street1 == pm.environment.get(\"seed\") + '-street1';",
									"    });",
									"    const seed = pm.environment.get(\"seed\");",
									"",
									"    pm.expect(address.firstName).to.be.eq(seed + '-firstname');",
									"    pm.expect(address.lastName).to.be.eq(seed + '-lastname');",
									"    pm.expect(address.street1).to.be.eq(seed + '-street1');",
									"    pm.expect(address.street2).to.be.eq(seed + '-street2');",
									"    pm.expect(address.city).to.be.eq(seed + '-city');",
									"    pm.expect(address.zipCode).to.be.eq(seed + '-zipCode');",
									"    pm.expect(address.country).to.be.eq('US');",
									"    pm.expect(address.province).to.be.eq('AZ');",
									"    pm.expect(address.tags).to.be.a('array').to.not.be.empty;",
									"    pm.expect(address.tags).to.contain('default');",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.eq(seed + '-company');",
									"    pm.expect(address.customAttributes.phone).to.be.eq(seed + '-phone');",
									"",
									"    pm.environment.set(\"addressIdsToDelete\", pm.environment.get(\"addressIdsToDelete\") + \",\" + address.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_user_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Province: Arizona",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e868c823-f86b-432b-a7a5-2fb04a45a6a2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0dac9877-31f4-4c5a-b61c-023afb4f3e70",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"TEST\",\n    \"lastName\": \"USER\",\n    \"street1\": \"TEST ADDRESS\",\n    \"zipCode\": \"{{seed}}-12345\",\n    \"city\": \"Gotham\",\n    \"country\": \"US\",\n    \"province\": \"AZ\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_address_add}}",
							"host": [
								"{{domain}}{{endpoint_user_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get: check province",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "308e75a5-b593-4ee5-99c5-9b10812499fc",
								"exec": [
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.province).to.be.eq('AZ');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_user_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProvinceCode: Texas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2883e3d5-ac37-4900-b793-94def3e34b83",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b2b11ad-742b-47da-9590-0a3f1ae8b3bb",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"TEST\",\n    \"lastName\": \"USER\",\n    \"street1\": \"{{seed}}-street1\",\n    \"zipCode\": \"12345\",\n    \"city\": \"Gotham\",\n    \"country\": \"US\",\n    \"province\": \"TX\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_address_add}}",
							"host": [
								"{{domain}}{{endpoint_user_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get: check province by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ba08f27-f4a4-4055-8f17-f19e6024505e",
								"exec": [
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.province).to.be.eq('TX');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_user_addresses_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "updateAddress",
			"item": [
				{
					"name": "Errors",
					"item": [
						{
                          "name": "Add: all field mapping",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "pm.test(\"Status code is 200\", function () {",
                                  "    pm.response.to.have.status(200);",
                                  "})"
                                ]
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "type": "text/javascript",
                                "exec": [
                                  "// Create a seed to have a randomized data set",
                                  "pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
                                ]
                              }
                            }
                          ],
                          "request": {
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"firstName\": \"{{seed}}-firstname\",\n    \"lastName\": \"{{seed}}-lastname\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"{{seed}}-street2\",\n    \"city\": \"{{seed}}-city\",\n    \"zipCode\": \"{{seed}}-zipCode\",\n    \"country\": \"US\",\n    \"province\": \"Arizona\",\n    \"customAttributes\": {\n        \"company\": \"{{seed}}-company\",\n        \"phone\": \"{{seed}}-phone\"\n    }\n}"
                            },
                            "url": {
                              "raw": "{{domain}}{{endpoint_user_address_add}}",
                              "host": [
                                "{{domain}}{{endpoint_user_address_add}}"
                              ]
                            }
                          },
                          "response": []
                        },
                      {
                        "name": "Get address ID",
                        "event": [
                          {
                            "listen": "test",
                            "script": {
                              "id": "2871284f-3edc-4c69-a994-6c0d59847fbc",
                              "exec": [
                                "const response = pm.response.json();",
                                "pm.test(\"Addresses are returned\", function () {",
                                "    const address = response.addresses.pop();",
                                "    pm.environment.set(\"address-id\", address.id);",
                                "});"
                              ],
                              "type": "text/javascript"
                            }
                          }
                        ],
                        "request": {
                          "method": "POST",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": {
                            "mode": "raw",
                            "raw": "{\n}"
                          },
                          "url": {
                            "raw": "{{domain}}{{endpoint_user_addresses_get}}",
                            "host": [
                              "{{domain}}{{endpoint_user_addresses_get}}"
                            ]
                          }
                        },
                        "response": []
                      },
                      {
                        "name": "bad country name",
                        "event": [
                          {
                            "listen": "test",
                            "script": {
                              "id": "9a70dd04-bf55-4a3e-a33c-25bf5b8e279f",
                              "exec": [
                                "var jsonData = pm.response.json();",
                                "pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
                                "    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
                                "});",
                                "",
                                "pm.test(\"Incorrect validation error structure\", function () {",
                                "    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
                                "    jsonData.error.validationErrors.forEach((error) => {",
                                "        pm.expect(error.path).to.not.be.empty;",
                                "        pm.expect(error.message).to.not.be.empty;",
                                "    })",
                                "});",
                                "",
                                "pm.test(\"Correct country error is shown\", function () {",
                                "    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
                                "    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('Country is not a valid country');",
                                "});"
                              ],
                              "type": "text/javascript"
                            }
                          }
                        ],
                        "request": {
                          "method": "POST",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": {
                            "mode": "raw",
                            "raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"country\": \"TESTER\"\n}"
                          },
                          "url": {
                            "raw": "{{domain}}{{endpoint_user_address_update}}",
                            "host": [
                              "{{domain}}{{endpoint_user_address_update}}"
                            ]
                          }
                        },
                        "response": []
                      },
                      {
                        "name": "incorrect province",
                        "event": [
                          {
                            "listen": "test",
                            "script": {
                              "id": "9ca6c558-595c-4d28-ac3f-5bb784ac6ad5",
                              "exec": [
                                "var jsonData = pm.response.json();",
                                "pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
                                "    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
                                "});",
                                "",
                                "pm.test(\"Incorrect validation error structure\", function () {",
                                "    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
                                "    jsonData.error.validationErrors.forEach((error) => {",
                                "        pm.expect(error.path).to.not.be.empty;",
                                "        pm.expect(error.message).to.not.be.empty;",
                                "    })",
                                "});",
                                "",
                                "pm.test(\"Correct province error is shown\", function () {",
                                "    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('province');",
                                "    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('Province is not valid');",
                                "});"
                              ],
                              "type": "text/javascript"
                            }
                          }
                        ],
                        "request": {
                          "method": "POST",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": {
                            "mode": "raw",
                            "raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"country\": \"IT\",\n    \"province\":\"{{seed}}-province\"\n}"
                          },
                          "url": {
                            "raw": "{{domain}}{{endpoint_user_address_update}}",
                            "host": [
                              "{{domain}}{{endpoint_user_address_update}}"
                            ]
                          }
                        },
                        "response": []
                      },
                      {
                        "name": "Address not found",
                        "event": [
                          {
                            "listen": "test",
                            "script": {
                              "id": "e2395c53-82cf-4424-b73c-b0789606c7b9",
                              "exec": [
                                "var jsonData = pm.response.json();",
                                "",
                                "pm.test(\"Incorrect address ID provided\", function () {",
                                "    pm.expect(jsonData.error.code).to.be.eq('EUNKNOWN');",
                                "});"
                              ],
                              "type": "text/javascript"
                            }
                          }
                        ],
                        "request": {
                          "method": "POST",
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": {
                            "mode": "raw",
                            "raw": "{\n\t\"id\": \"0\",\n    \"country\": \"IT\",\n    \"province\":\"{{seed}}-province\"\n}"
                          },
                          "url": {
                            "raw": "{{domain}}{{endpoint_user_address_update}}",
                            "host": [
                              "{{domain}}{{endpoint_user_address_update}}"
                            ]
                          }
                        },
                        "response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add: all field mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{seed}}-firstname\",\n    \"lastName\": \"{{seed}}-lastname\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"{{seed}}-street2\",\n    \"city\": \"{{seed}}-city\",\n    \"zipCode\": \"{{seed}}-zipCode\",\n    \"country\": \"US\",\n    \"province\": \"Arizona\",\n    \"customAttributes\": {\n        \"company\": \"{{seed}}-company\",\n        \"phone\": \"{{seed}}-phone\"\n    }\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_address_add}}",
							"host": [
								"{{domain}}{{endpoint_user_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get address ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41b3ef08-f179-4b2c-94f9-66b7b77ffa42",
								"exec": [
									"const response = pm.response.json();",
									"const address = response.addresses.find(function(el) {",
									"    return el.street1 == pm.environment.get(\"seed\") + '-street1';",
									"});",
									"",
									"if (address.id) {",
									"    pm.environment.set(\"address-id\", address.id);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_user_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change all fields + default",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8dd06eb-2165-4f11-8efd-453643322bae",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f690a69f-a8f8-4958-a885-ceb326e6935d",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"firstName\": \"{{seed}}-firstname\",\n    \"lastName\": \"{{seed}}-lastname\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"{{seed}}-street2\",\n    \"city\": \"{{seed}}-city\",\n    \"zipCode\": \"{{seed}}-zipCode\",\n    \"country\": \"EE\",\n    \"province\":\"{{seed}}-province\",\n    \"customAttributes\": {\n        \"company\": \"{{seed}}-company\",\n        \"phone\": \"{{seed}}-phone\"\n    },\n    \"tags\": [\n    \t\"default\"\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_address_update}}",
							"host": [
								"{{domain}}{{endpoint_user_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get: check all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e15ae1b-cba7-46ac-9d81-3fe14d6464dc",
								"exec": [
									"pm.test(\"Make sure all address data was properly changed\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.find(function(el) {",
									"        return el.street1 == pm.environment.get(\"seed\") + '-street1';",
									"    });",
									"    pm.expect(address.firstName).to.be.eq(pm.environment.get(\"seed\") + '-firstname');",
									"    pm.expect(address.lastName).to.be.eq(pm.environment.get(\"seed\") + '-lastname');",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.eq(pm.environment.get(\"seed\") + '-street2');",
									"    pm.expect(address.city).to.be.eq(pm.environment.get(\"seed\") + '-city');",
									"    pm.expect(address.zipCode).to.be.eq(pm.environment.get(\"seed\") + '-zipCode');",
									"    pm.expect(address.country).to.be.eq('EE');",
									"    pm.expect(address.province).to.be.null;",
									"    pm.expect(address.tags).to.be.a('array').to.not.be.empty;",
									"    pm.expect(address.tags).to.contain('default');",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.eq(pm.environment.get(\"seed\") + '-company');",
									"    pm.expect(address.customAttributes.phone).to.be.eq(pm.environment.get(\"seed\") + '-phone');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_user_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make data blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b003ba0b-8e10-4114-8596-c3d5d2c348c1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3c208031-50ed-468e-b4eb-468b100a4385",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"\",\n    \"city\": \"\",\n    \"zipCode\": \"\",\n    \"country\": \"EE\",\n    \"province\":\"{{seed}}-province\",\n    \"customAttributes\": {\n        \"company\": \"\",\n        \"phone\": \"\"\n    }\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_address_update}}",
							"host": [
								"{{domain}}{{endpoint_user_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check fields are blank + clean",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b761af07-7e9c-48a8-9e94-13e08e9ef69d",
								"exec": [
									"pm.test(\"Make sure all address data was properly changed\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.find(function(el) {",
									"        return el.street1 == pm.environment.get(\"seed\") + '-street1';",
									"    });",
									"    pm.expect(address.firstName).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.lastName).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.city).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.zipCode).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.country).to.be.eq('EE');",
									"    pm.expect(address.province).to.be.null;",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.customAttributes.phone).to.be.a(\"string\").to.be.empty;",
									"});",
									"",
									"pm.environment.unset(\"seed\");",
									"pm.environment.unset(\"address-id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_user_addresses_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "deleteAddresses",
			"item": [
				{
					"name": "Prepare test data",
					"item": [
						{
							"name": "Create address 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f6ce858c-066b-4ef1-b6c7-4de925a05915",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cc8eea39-7859-4156-ace0-1532078738cf",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"street1\": \"{{seed}}-street1\",\n\t\"country\": \"US\",\n\t\"province\":\"AZ\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_add}}",
									"host": [
										"{{domain}}{{endpoint_user_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create address 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55cdbaf2-6277-4a90-a42a-7827b1d0f77d",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "23691813-8870-4865-a3fd-88d177324c71",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"street1\": \"{{seed}}-street1\",\n\t\"country\": \"US\",\n\t\"province\":\"AZ\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_add}}",
									"host": [
										"{{domain}}{{endpoint_user_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69ada3fc-f9a6-488d-b688-408a32035465",
										"exec": [
											"var response = pm.response.json().addresses;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (response.length > 1) {",
											"    pm.environment.set(\"first-address-id-to-delete\", response.pop().id);",
											"    pm.environment.set(\"second-address-id-to-delete\", response.pop().id);",
											"} else {",
											"    tests['Something went wrong with address creation'] = false;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Errors",
					"item": [
						{
							"name": "bad address id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1c2f1f8-4259-4e35-beec-44daea50a3a2",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EUNKNOWN because an bad address ID was passed for deletion\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EUNKNOWN');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t\"12345\"\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No address ids given",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36a7b895-7a66-44f5-81d3-ecc913e99f8d",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because no address ids were given\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single with empty address id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b98ded50-bbd1-44c3-99c4-2fec94302266",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because an empty address id string was passed\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\"\"]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Multiple with empty address id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1c2f1f8-4259-4e35-beec-44daea50a3a2",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because no an empty address was passed, beside valid ones\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t\"{{firstAddressIdToDelete}}\",\n\t\t\"\",\n\t\t\"{{secondAddressIdToDelete}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_delete}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests",
					"item": [
						{
							"name": "Delete multiple addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5af62f0e-3e3c-48a7-972d-0a09d8af2956",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t\"{{first-address-id-to-delete}}\",\n\t\t\"{{second-address-id-to-delete}}\"\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for deleted addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74ff7be6-d178-4908-a197-68c625cd8ca4",
										"exec": [
											"pm.test(\"Check if addresses were deleted\", function() {",
											"    const addresses = pm.response.json().addresses;",
											"    const filteredAddresses = addresses.filter(address => address.id === pm.environment.get(\"first-address-id-to-delete\") || address.id === pm.environment.get(\"second-address-id-to-delete\"));",
											"    pm.expect(filteredAddresses).to.be.a('array').to.be.empty;",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Get Shopify address ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2aeefe63-b494-4971-a6f6-94d22a67d454",
								"exec": [
									"pm.environment.unset(\"address-ids-to-delete\");",
									"",
									"const addresses = pm.response.json().addresses;",
									"const addressIdsToDelete = Array();",
									"",
									"",
									"addresses.forEach(function(address) {",
									"    addressIdsToDelete.push('\"' + address.id + '\"');",
									"})",
									"",
									"pm.environment.set(\"address-ids-to-delete\", addressIdsToDelete.join(','));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_user_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup test data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "357b04dc-59d7-4c89-a4a6-2fd176a225e1",
								"exec": [
									"// Cleanup environment vars",
									"pm.environment.unset(\"seed\");",
									"pm.environment.unset(\"address-ids-to-delete\");",
									"pm.environment.unset(\"address-id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "98fc4f79-b5c7-45e7-b7a7-f47ae9853435",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\": [\n\t\t{{address-ids-to-delete}}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
							"host": [
								"{{domain}}{{endpoint_user_addresses_delete}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get registration URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "38228835-951d-4c5b-978f-383b46e99eb8",
						"exec": [
							"pm.test(\"url exists\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.url).to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "{{domain}}{{endpoint_user_registration_url_get}}",
					"host": [
						"{{domain}}{{endpoint_user_registration_url_get}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Initialize web login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "38228835-951d-4c5b-978f-383b46e99eb8",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"phrase\": \"test\"\n}"
				},
				"url": {
					"raw": "{{domain}}{{endpoint_user_web_login_init}}",
					"host": [
						"{{domain}}{{endpoint_user_web_login_init}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1046a112-2984-4e67-8884-2ad3ee5952d1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "45c269a7-f743-419a-9453-7cc96b15fc56",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
