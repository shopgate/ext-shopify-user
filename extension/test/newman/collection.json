{
	"info": {
		"_postman_id": "b48007f5-8be8-4e99-acc3-80de5783794c",
		"name": "Shopify Connect",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "9cbbf957-6ca2-465d-a7b8-159b73ec8527",
			"name": "Errors: unauthorized",
			"item": [
				{
					"_postman_id": "56e03b35-f79e-4c85-87d2-208645a398cc",
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9cf418a-ecb3-4a21-91b5-b132c7c4ea7c",
								"type": "text/javascript",
								"exec": [
									"// doesn't matter if we succeed, this just clears previous states",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_logout}}",
							"host": [
								"{{domain}}{{endpoint_logout}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "94194fcf-8495-4329-a9d5-3a40c8a41a70",
					"name": "getUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot retrieve data\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "9689fd06-ad13-4a16-85cb-961af4587dbe",
					"name": "getAddresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in, cannot get address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c34d4550-08a3-4f67-8b13-f2728dc2de34",
					"name": "addAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot add address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "0b201a95-44a2-4e16-95a2-b0d1dec4b61a",
					"name": "updateAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannout update address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\":\"1\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_update}}",
							"host": [
								"{{domain}}{{endpoint_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "05607b2a-8aba-4f83-afac-29aebc072d03",
					"name": "deleteAddresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot delete addresses\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\": [\n\t\t\"1\"\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_delete}}",
							"host": [
								"{{domain}}{{endpoint_addresses_delete}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "b82e7933-91d9-47e9-98c1-2e5c6e65e6e6",
			"name": "getUser",
			"item": [
				{
					"_postman_id": "ca095e17-f77d-4612-8fd6-9803fa9d1a4b",
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"strategy\": \"basic\",\n\t\"parameters\": {\n\t\t\"login\": \"{{username}}\",\n\t\t\"password\": \"{{password}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_login}}",
							"host": [
								"{{domain}}{{endpoint_login}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "f81ff3f5-0828-4099-b85b-462869eda7ab",
					"name": "getUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.with.body;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response have minimum return values\", function() {",
									"    var response = pm.response.json()",
									"    pm.expect(response.id).to.not.be.empty;",
									"    pm.expect(response.firstName).to.not.be.empty;",
									"    pm.expect(response.lastName).to.not.be.empty;",
									"    pm.expect(response.mail).to.not.be.empty;",
									"    pm.response.to.not.have.jsonBody(\"addresses\");",
									"})",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "e78edc56-eaf4-4684-b327-985de0bf8bce",
			"name": "addAddress",
			"item": [
				{
					"_postman_id": "28c35b14-cda7-4002-8bc2-b1634a8f300d",
					"name": "Errors",
					"item": [
						{
							"_postman_id": "bc53b4db-a661-4520-9831-42c81c2954d9",
							"name": "missing address data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Correct missing address error is thrown\", function () {",
											"    pm.expect(jsonData.error.message).to.be.eq('Empty address data.');",
											"    pm.expect(jsonData.error.code).to.be.eq('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "f5654e0f-8757-4b94-bea5-edc8b10daff3",
							"name": "bad country name",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct country error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"TESTER\" is not a valid country');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"country\": \"TESTER\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "068dbfad-0628-483e-a599-41beaa362cb1",
							"name": "country is required",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct country error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"Country\" is required');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"province\":\"{{seed}}-province\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "fde9905c-889c-46af-a70c-f19470293a55",
							"name": "incorrect province",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct province error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('province');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"Province\" is not valid');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"country\": \"US\",\n        \"province\":\"{{seed}}-province\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "41d762df-1121-42df-b436-fd9bb3453f03",
							"name": "Create GB address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"street1\": \"TEST ADDRESS\",\n        \"country\": \"GB\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "225a5292-0144-4a26-b72d-fb59bcd7d14b",
							"name": "Get address ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a91dbc1-ad95-4997-b170-7655199bf6b7",
										"type": "text/javascript",
										"exec": [
											"const response = pm.response.json();",
											"const address = response.addresses.pop();",
											"var addressIdsToDelete = [];",
											"addressIdsToDelete.push(address.id);",
											"pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "beca753b-152c-482d-934d-08f51ab63d66",
							"name": "Add duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Correct duplicate error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('street1');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"Street1\" has already been taken');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"street1\": \"TEST ADDRESS\",\n        \"country\": \"GB\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "508bd927-491b-4126-8128-3ec383ee452b",
					"name": "Add: all field mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\",\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\"\n        }\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "1b660e59-3c32-43de-ba27-8f533a3a29ed",
					"name": "Get: check all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36ca1a1a-c71e-41c3-b3e7-1342bb462383",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.id).to.be.a('number', 'Not a number provided!');",
									"    pm.expect(address.firstName).to.be.eq(pm.environment.get(\"seed\") + '-firstname');",
									"    pm.expect(address.lastName).to.be.eq(pm.environment.get(\"seed\") + '-lastname');",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.eq(pm.environment.get(\"seed\") + '-street2');",
									"    pm.expect(address.city).to.be.eq(pm.environment.get(\"seed\") + '-city');",
									"    pm.expect(address.zipCode).to.be.eq(pm.environment.get(\"seed\") + '-zipCode');",
									"    pm.expect(address.country).to.be.eq('United States');",
									"    pm.expect(address.province).to.be.eq('Arizona');",
									"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.eq(pm.environment.get(\"seed\") + '-company');",
									"    pm.expect(address.customAttributes.phone).to.be.eq(pm.environment.get(\"seed\") + '-phone');",
									"",
									"    var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
									"    addressIdsToDelete.push(address.id);",
									"    pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "07bd2451-b252-4f2b-bb13-c17917e19463",
					"name": "Province: Arizona",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e868c823-f86b-432b-a7a5-2fb04a45a6a2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0dac9877-31f4-4c5a-b61c-023afb4f3e70",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"street1\": \"{{seed}}-street1\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "80128ec4-c6fb-4a35-bbf5-e42e5c1a7dc6",
					"name": "Get: check province",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "147d2b27-1b15-458e-be01-a9a0f356efb6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.province).to.be.eq('Arizona');",
									"    pm.expect(address.provinceCode).to.be.eq('AZ');",
									"    ",
									"    var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
									"    addressIdsToDelete.push(address.id);",
									"    pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "ed96504c-0c6c-4823-bb98-c24256f8e50d",
					"name": "ProvinceCode: Texas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2883e3d5-ac37-4900-b793-94def3e34b83",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b2b11ad-742b-47da-9590-0a3f1ae8b3bb",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"street1\": \"{{seed}}-street1\",\n        \"country\": \"US\",\n        \"province\":\"TX\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c500b014-e759-4a52-a621-3bc4c60f83ae",
					"name": "Get: check province by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e744be76-6e39-4997-a361-70a78fcd2204",
								"type": "text/javascript",
								"exec": [
									"var response = pm.response.json().addresses;",
									"",
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.province).to.be.eq('Texas');",
									"    pm.expect(address.provinceCode).to.be.eq('TX');",
									"    ",
									"    var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
									"    addressIdsToDelete.push(address.id);",
									"    pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "e3b9b90e-74b7-4fbb-a64a-b43b09e32413",
			"name": "updateAddress",
			"item": [
				{
					"_postman_id": "71bea8a0-426a-4b6d-bbb4-2245c49ab9a9",
					"name": "Errors",
					"item": [
						{
							"_postman_id": "c7de1ae8-385d-4c7c-91ab-2b663aea9f00",
							"name": "General",
							"item": [
								{
									"_postman_id": "3ee37172-de55-49a7-9fce-194ee812f793",
									"name": "Add: all field mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"company\": \"{{seed}}-company\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"phone\": \"{{seed}}-phone\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\"\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "8fc24667-470a-49e6-86ee-36310d6cc261",
									"name": "Get address ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a52f9daf-4542-4818-8d40-62ee5f6e3a98",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Addresses are returned\", function () {",
													"    const response = pm.response.json();",
													"    const address = response.addresses.pop();",
													"    pm.environment.set(\"address-id\", address.id);",
													"});",
													"",
													"const response = pm.response.json();",
													"const address = response.addresses.pop();",
													"var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
													"addressIdsToDelete.push(address.id);",
													"pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_addresses_get}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "611adf33-f4fb-4b40-be31-be64a055f57d",
									"name": "bad country name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test(\"Incorrect validation error structure\", function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    })",
													"});",
													"",
													"pm.test(\"Correct country error is shown\", function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
													"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"TESTER\" is not a valid country');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"country\": \"TESTER\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_update}}",
											"host": [
												"{{domain}}{{endpoint_address_update}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "c87c5728-705e-4e6c-97e0-ce4a6caa4440",
									"name": "incorrect province",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ca6c558-595c-4d28-ac3f-5bb784ac6ad5",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test(\"Incorrect validation error structure\", function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    })",
													"});",
													"",
													"pm.test(\"Correct province error is shown\", function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('province');",
													"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"' + pm.environment.get(\"seed\") + '-province\" is not valid');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"country\": \"IT\",\n    \"province\":\"{{seed}}-province\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_update}}",
											"host": [
												"{{domain}}{{endpoint_address_update}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "e6fad0c8-205b-4347-8b6d-30c3482ca4e8",
									"name": "Address not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Incorrect address ID provided\", function () {",
													"    pm.expect(jsonData.error.code).to.be.eq('EINVALIDCALL');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"0\",\n    \"country\": \"IT\",\n    \"province\":\"{{seed}}-province\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_update}}",
											"host": [
												"{{domain}}{{endpoint_address_update}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "43df9d27-c152-485e-93c2-daf6b9bb0d04",
					"name": "Add: all field mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\",\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\"\n        }\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "3a6384d3-d65e-4648-8e14-6eb74c9ca308",
					"name": "Get address ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fd3470d-29fe-45a9-b7ce-5dd6020a92e8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Addresses are returned\", function () {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.environment.set(\"address-id\", address.id);",
									"    ",
									"    var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
									"    addressIdsToDelete.push(address.id);",
									"    pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "d1f93127-9be8-40fb-bd5a-1136ed41ac96",
					"name": "Change all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8dd06eb-2165-4f11-8efd-453643322bae",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Address successfully updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f690a69f-a8f8-4958-a885-ceb326e6935d",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"firstName\": \"{{seed}}-firstname\",\n    \"lastName\": \"{{seed}}-lastname\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"{{seed}}-street2\",\n    \"city\": \"{{seed}}-city\",\n    \"zipCode\": \"{{seed}}-zipCode\",\n    \"country\": \"EE\",\n    \"province\":\"{{seed}}-province\",\n    \"customAttributes\": {\n        \"company\": \"{{seed}}-company\",\n        \"phone\": \"{{seed}}-phone\"\n    }\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_update}}",
							"host": [
								"{{domain}}{{endpoint_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "50fbbc12-6980-44a6-bd12-4271594f5c89",
					"name": "Get: check all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17f771f8-7752-4c3e-bed4-4d1ff520dba1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly changed\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.id).to.be.a('number', 'Not a number provided!');",
									"    pm.expect(address.firstName).to.be.eq(pm.environment.get(\"seed\") + '-firstname');",
									"    pm.expect(address.lastName).to.be.eq(pm.environment.get(\"seed\") + '-lastname');",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.eq(pm.environment.get(\"seed\") + '-street2');",
									"    pm.expect(address.city).to.be.eq(pm.environment.get(\"seed\") + '-city');",
									"    pm.expect(address.zipCode).to.be.eq(pm.environment.get(\"seed\") + '-zipCode');",
									"    pm.expect(address.country).to.be.eq('Estonia');",
									"    pm.expect(address.province).to.be.eq(pm.environment.get(\"seed\") + '-province');",
									"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.eq(pm.environment.get(\"seed\") + '-company');",
									"    pm.expect(address.customAttributes.phone).to.be.eq(pm.environment.get(\"seed\") + '-phone');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "81a557d4-19cc-44aa-ba5f-ac2232cabd16",
					"name": "Make data blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Address successfully updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"\",\n    \"city\": \"\",\n    \"zipCode\": \"\",\n    \"country\": \"EE\",\n    \"province\":\"{{seed}}-province\",\n    \"customAttributes\": {\n        \"company\": \"\",\n        \"phone\": \"\"\n    }\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_update}}",
							"host": [
								"{{domain}}{{endpoint_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c2a3690a-2366-4997-b5d1-30c247a2f492",
					"name": "Check fields are blank + clean",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5f55d33-740f-4926-ab78-f4fa3a883086",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly changed\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.id).to.be.a('number', 'Not a number provided!');",
									"    pm.expect(address.firstName).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.lastName).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.city).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.zipCode).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.country).to.be.eq('Estonia');",
									"    pm.expect(address.province).to.be.eq(pm.environment.get(\"seed\") + '-province');",
									"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.customAttributes.phone).to.be.a(\"string\").to.be.empty;",
									"});",
									"",
									"pm.environment.unset(\"seed\");",
									"pm.environment.unset(\"address-id\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "9b18a46d-8fe1-478f-a52b-a1840efcc247",
			"name": "deleteAddresses",
			"item": [
				{
					"_postman_id": "378739cf-7ddc-4c60-a85d-b0511ff026aa",
					"name": "Prepare test data",
					"item": [
						{
							"_postman_id": "3e24847e-37c9-4b60-bd73-40cdb41fe8f6",
							"name": "Fetch addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2961bf4-81a5-495f-9e89-e667a2196cdf",
										"type": "text/javascript",
										"exec": [
											"var response = pm.response.json().addresses;",
											"// Set the overall number of addresses, the last test will check if this number decreased by two",
											"pm.environment.set(\"overallCountOfAddresses\", response.length);",
											"",
											"// Set the last three addresses, these both will be deleted in the next test",
											"pm.environment.set(\"defaultAddressId\", response[0].id);",
											"",
											"if (response.length > 1) {",
											"    pm.environment.set(\"firstAddressIdToDelete\", response[response.length-1].id);",
											"    pm.environment.set(\"secondAddressIdToDelete\", response[response.length-2].id);",
											"    pm.environment.set(\"thirdAddressIdToDelete\", response[response.length-3].id);",
											"}",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "aefba2d8-75ca-4324-9ec2-963d9a7569bf",
							"name": "Create another address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n\t\t\"street1\": \"{{seed}}-street1\",\n        \"country\": \"US\",\n        \"province\":\"AZ\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "56d70085-2853-40f8-9f46-0f9dedae8037",
							"name": "Get address ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10b40008-18ea-40f9-b06f-faf414b3ca4c",
										"type": "text/javascript",
										"exec": [
											"const response = pm.response.json();",
											"const address = response.addresses.pop();",
											"var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
											"addressIdsToDelete.push(address.id);",
											"pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "0f9846f5-5a92-49f1-a668-7001387f490e",
					"name": "Errors",
					"item": [
						{
							"_postman_id": "6b6fc439-24af-4e91-92e1-5505d7370d86",
							"name": "Delete default address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58b53498-7367-430e-9b55-e88e32ee3fd4",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because the address is default\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t{{defaultAddressId}}\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "92f33d56-47fc-4370-b653-f76b0a7f3663",
							"name": "No address ids given",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36a7b895-7a66-44f5-81d3-ecc913e99f8d",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because no address ids were given\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "e981bdf6-459b-4e01-9c4c-8b4335e340b6",
							"name": "Single with empty address id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b98ded50-bbd1-44c3-99c4-2fec94302266",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because an empty address id string was passed\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\"\"]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "ac5c310c-2f4e-48a2-ad5f-8b480e7e436c",
							"name": "Multiple with empty address id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1c2f1f8-4259-4e35-beec-44daea50a3a2",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because no an empty address was passed, beside valid ones\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t{{firstAddressIdToDelete}},\n\t\t{{secondAddressIdToDelete}},\n\t\t{{thirdAddressIdToDelete}},\n\t\t\"\"\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "b749318a-3d61-4303-aeb5-9d69f936d10f",
					"name": "Tests",
					"item": [
						{
							"_postman_id": "bc2f10ac-0603-41ee-a0d1-d60b39cb5827",
							"name": "Delete multiple addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Addresses deleted and return is success true\", function () {",
											"    pm.expect(jsonData.success).to.be.eq(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t{{firstAddressIdToDelete}},\n\t\t{{secondAddressIdToDelete}},\n\t\t{{thirdAddressIdToDelete}}\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "69807f96-5aad-4617-9d93-7c136ff947f2",
							"name": "Check for deleted addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb1d6d7a-1cae-4781-966d-9539dc1067dd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Check if addresses were deleted\", function() {",
											"    var addresses = pm.response.json().addresses;",
											"",
											"    const filteredAddresses = addresses.filter(address => address.id === pm.environment.get(\"firstAddressIdToDelete\") || address.id === pm.environment.get(\"secondAddressIdToDelete\") || address.id === pm.environment.get(\"thirdAddressIdToDelete\"));",
											"    pm.expect(filteredAddresses).to.be.empty;",
											"})",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"_postman_id": "5a5cf0cc-749c-459e-948e-40233e37e894",
			"name": "Cleanup",
			"item": [
				{
					"_postman_id": "d27d2784-5f1b-4942-98ab-6441745cefd0",
					"name": "Cleanup test data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8755910-e295-4a63-8227-b7d4d7dcf516",
								"type": "text/javascript",
								"exec": [
									"// Cleanup environment vars",
									"pm.environment.unset(\"seed\");",
									"pm.environment.unset(\"overallCountOfAddresses\");",
									"pm.environment.unset(\"defaultAddressId\");",
									"pm.environment.unset(\"firstAddressIdToDelete\");",
									"pm.environment.unset(\"secondAddressIdToDelete\");",
									"pm.environment.unset(\"thirdAddressIdToDelete\");",
									"pm.environment.unset(\"addressIdsToDelete\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\": [\n\t\t{{addressIdsToDelete}}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_delete}}",
							"host": [
								"{{domain}}{{endpoint_addresses_delete}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
