{
	"info": {
		"_postman_id": "b48007f5-8be8-4e99-acc3-80de5783794c",
		"name": "Shopify Connect",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "2bab12cb-8ce3-4b55-b49a-e98230f2a97d",
			"name": "Errors: unauthorized",
			"item": [
				{
					"_postman_id": "64afd9e1-72c0-42d5-9d28-9dfc7eaac879",
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9cf418a-ecb3-4a21-91b5-b132c7c4ea7c",
								"type": "text/javascript",
								"exec": [
									"// doesn't matter if we succeed, this just clears previous states",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_logout}}",
							"host": [
								"{{domain}}{{endpoint_logout}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "5553edbf-632b-4e17-a615-ad2d3ee61101",
					"name": "getUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot retrieve data\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "3bb5f563-88e9-4f00-a991-3f202a9e6034",
					"name": "getAddresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in, cannot get address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c8f880ad-6953-4895-887c-c43fa651c8e1",
					"name": "addAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot add address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "d8f7d389-dc71-41cd-8571-e213b9a7231f",
					"name": "updateAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannout update address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\":\"1\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_update}}",
							"host": [
								"{{domain}}{{endpoint_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "637ba2ed-7eed-48c3-aad8-80e0f296f436",
					"name": "deleteAddresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot delete addresses\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\": [\n\t\t\"1\"\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_delete}}",
							"host": [
								"{{domain}}{{endpoint_addresses_delete}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "100ab424-c05e-46cc-b96d-fa18c26a793d",
			"name": "getUser",
			"item": [
				{
					"_postman_id": "0cb47b0b-3004-48a9-b533-225039c39c53",
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"strategy\": \"basic\",\n\t\"parameters\": {\n\t\t\"login\": \"{{username}}\",\n\t\t\"password\": \"{{password}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_login}}",
							"host": [
								"{{domain}}{{endpoint_login}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "e09452b7-fabf-403e-8e94-e61daff42610",
					"name": "getUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.with.body;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response have minimum return values\", function() {",
									"    var response = pm.response.json()",
									"    pm.expect(response.id).to.not.be.empty;",
									"    pm.expect(response.firstName).to.not.be.empty;",
									"    pm.expect(response.lastName).to.not.be.empty;",
									"    pm.expect(response.mail).to.not.be.empty;",
									"    pm.response.to.not.have.jsonBody(\"addresses\");",
									"})",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "6ee0668e-ab9b-4fb8-a46a-889fcbcc5b8e",
			"name": "addAddress",
			"item": [
				{
					"_postman_id": "12ce49a4-aa93-4c6b-9a68-b2168aa7d72d",
					"name": "Errors",
					"item": [
						{
							"_postman_id": "107d0db4-d463-493e-b2e4-8a71f0bd2a70",
							"name": "missing address data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Correct missing address error is thrown\", function () {",
											"    pm.expect(jsonData.error.message).to.be.eq('Empty address data.');",
											"    pm.expect(jsonData.error.code).to.be.eq('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "43dd5d7d-117e-4449-bc06-9d11e29e5e36",
							"name": "bad country name",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct country error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"TESTER\" is not a valid country');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"country\": \"TESTER\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "cc5c6d11-be92-47a7-90c8-d7c272db50e1",
							"name": "country is required",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct country error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"Country\" is required');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"province\":\"{{seed}}-province\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "43cf1eee-09bc-4087-8b4c-499f43d65dd7",
							"name": "incorrect province",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct province error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('province');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"Province\" is not valid');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"country\": \"US\",\n        \"province\":\"{{seed}}-province\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "e2a5efac-a4ef-4977-92e7-87bb4466abe1",
							"name": "Create GB address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"street1\": \"TEST ADDRESS\",\n        \"country\": \"GB\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "9ed87fba-ed31-44d6-84de-47d04647da0e",
							"name": "Get address ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cd94b43-9c57-4124-931e-ed5bb8a35573",
										"type": "text/javascript",
										"exec": [
											"const response = pm.response.json();",
											"const address = response.addresses.pop();",
											"pm.environment.set(\"addressIdsToDelete\", address.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "35faac17-7a76-4dcd-b9c3-bf18d71cd1e3",
							"name": "Add duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Correct duplicate error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('street1');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"Street1\" has already been taken');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"street1\": \"TEST ADDRESS\",\n        \"country\": \"GB\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "247d4e7b-6e48-44e1-94bd-de02e5cea151",
					"name": "Add: all field mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\",\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\"\n        }\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "a8949e20-afac-4fa5-b039-3ca1c5286a55",
					"name": "Get: check all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba518d76-fbb8-42fb-87aa-b13229667b29",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.id).to.be.a('number', 'Not a number provided!');",
									"    pm.expect(address.firstName).to.be.eq(pm.environment.get(\"seed\") + '-firstname');",
									"    pm.expect(address.lastName).to.be.eq(pm.environment.get(\"seed\") + '-lastname');",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.eq(pm.environment.get(\"seed\") + '-street2');",
									"    pm.expect(address.city).to.be.eq(pm.environment.get(\"seed\") + '-city');",
									"    pm.expect(address.zipCode).to.be.eq(pm.environment.get(\"seed\") + '-zipCode');",
									"    pm.expect(address.country).to.be.eq('United States');",
									"    pm.expect(address.province).to.be.eq('Arizona');",
									"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.eq(pm.environment.get(\"seed\") + '-company');",
									"    pm.expect(address.customAttributes.phone).to.be.eq(pm.environment.get(\"seed\") + '-phone');",
									"",
									"    pm.environment.set(\"addressIdsToDelete\", pm.environment.get(\"addressIdsToDelete\") + \",\" + address.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "1ff56a0b-b7fe-475a-8f91-ecfaabbdd31d",
					"name": "Province: Arizona",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e868c823-f86b-432b-a7a5-2fb04a45a6a2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0dac9877-31f4-4c5a-b61c-023afb4f3e70",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"street1\": \"{{seed}}-street1\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "83145f14-9a6e-4dbc-9e58-9755c5b73f77",
					"name": "Get: check province",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55e314e6-1e60-402d-99c1-95a5e5c1cca6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.province).to.be.eq('Arizona');",
									"    pm.expect(address.provinceCode).to.be.eq('AZ');",
									"    ",
									"    pm.environment.set(\"addressIdsToDelete\", pm.environment.get(\"addressIdsToDelete\") + \",\" + address.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "8c461f0d-0c01-4241-b0d0-019911743298",
					"name": "ProvinceCode: Texas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2883e3d5-ac37-4900-b793-94def3e34b83",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b2b11ad-742b-47da-9590-0a3f1ae8b3bb",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"street1\": \"{{seed}}-street1\",\n        \"country\": \"US\",\n        \"province\":\"TX\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "27640f35-e109-4601-b519-74349c284805",
					"name": "Get: check province by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2c213fa-8c5a-40de-9906-b307c0e06824",
								"type": "text/javascript",
								"exec": [
									"var response = pm.response.json().addresses;",
									"",
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.province).to.be.eq('Texas');",
									"    pm.expect(address.provinceCode).to.be.eq('TX');",
									"    ",
									"    pm.environment.set(\"addressIdsToDelete\", pm.environment.get(\"addressIdsToDelete\") + \",\" + address.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "9cadd0f1-2a85-4c9b-b8e5-138b9f20267b",
			"name": "updateAddress",
			"item": [
				{
					"_postman_id": "f8a0bc5a-ec80-4d05-8460-6be99014c69e",
					"name": "Errors",
					"item": [
						{
							"_postman_id": "fa76ba02-2bbb-49d5-adb6-9a2fc1afef43",
							"name": "General",
							"item": [
								{
									"_postman_id": "7f36f3b2-8427-4888-bfc6-1cb0fe9347d9",
									"name": "Add: all field mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"company\": \"{{seed}}-company\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"phone\": \"{{seed}}-phone\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\"\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "fc0a758d-6e3e-4a62-99c8-1afa4c217e71",
									"name": "Get address ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b595626f-063b-495e-9550-3d6c8a80ee06",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Addresses are returned\", function () {",
													"    const response = pm.response.json();",
													"    const address = response.addresses.pop();",
													"    pm.environment.set(\"address-id\", address.id);",
													"});",
													"",
													"const response = pm.response.json();",
													"const address = response.addresses.pop();",
													"pm.environment.set(\"addressIdsToDelete\", pm.environment.get(\"addressIdsToDelete\") + \",\" + address.id);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_addresses_get}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "086d15a8-043d-4498-be6c-8e6a14e645bf",
									"name": "bad country name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test(\"Incorrect validation error structure\", function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    })",
													"});",
													"",
													"pm.test(\"Correct country error is shown\", function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
													"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"TESTER\" is not a valid country');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"country\": \"TESTER\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_update}}",
											"host": [
												"{{domain}}{{endpoint_address_update}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "7a6b57e4-c35e-4b6f-8313-7a816e623adf",
									"name": "incorrect province",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ca6c558-595c-4d28-ac3f-5bb784ac6ad5",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test(\"Incorrect validation error structure\", function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    })",
													"});",
													"",
													"pm.test(\"Correct province error is shown\", function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('province');",
													"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"' + pm.environment.get(\"seed\") + '-province\" is not valid');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"country\": \"IT\",\n    \"province\":\"{{seed}}-province\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_update}}",
											"host": [
												"{{domain}}{{endpoint_address_update}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "1f29ca0d-677b-49fc-b12a-fffa3e5cc312",
									"name": "Address not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Incorrect address ID provided\", function () {",
													"    pm.expect(jsonData.error.code).to.be.eq('EINVALIDCALL');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"0\",\n    \"country\": \"IT\",\n    \"province\":\"{{seed}}-province\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_update}}",
											"host": [
												"{{domain}}{{endpoint_address_update}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "730dc451-8792-4561-b12b-6b6194a248a4",
					"name": "Add: all field mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\",\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\"\n        }\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "3c9747ba-c522-4afb-8b33-305e04990c0e",
					"name": "Get address ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf9a6f0b-261b-4346-b2b6-e1610d9c503e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Addresses are returned\", function () {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.environment.set(\"address-id\", address.id);",
									"    ",
									"    pm.environment.set(\"addressIdsToDelete\", pm.environment.get(\"addressIdsToDelete\") + \",\" + address.id);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "b0d2130c-b5b4-4ed6-acfd-32854bb3ea95",
					"name": "Change all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8dd06eb-2165-4f11-8efd-453643322bae",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Address successfully updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f690a69f-a8f8-4958-a885-ceb326e6935d",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"firstName\": \"{{seed}}-firstname\",\n    \"lastName\": \"{{seed}}-lastname\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"{{seed}}-street2\",\n    \"city\": \"{{seed}}-city\",\n    \"zipCode\": \"{{seed}}-zipCode\",\n    \"country\": \"EE\",\n    \"province\":\"{{seed}}-province\",\n    \"customAttributes\": {\n        \"company\": \"{{seed}}-company\",\n        \"phone\": \"{{seed}}-phone\"\n    }\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_update}}",
							"host": [
								"{{domain}}{{endpoint_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "332fee95-9d7c-4e14-8c28-acef7b539bb7",
					"name": "Get: check all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17f771f8-7752-4c3e-bed4-4d1ff520dba1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly changed\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.id).to.be.a('number', 'Not a number provided!');",
									"    pm.expect(address.firstName).to.be.eq(pm.environment.get(\"seed\") + '-firstname');",
									"    pm.expect(address.lastName).to.be.eq(pm.environment.get(\"seed\") + '-lastname');",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.eq(pm.environment.get(\"seed\") + '-street2');",
									"    pm.expect(address.city).to.be.eq(pm.environment.get(\"seed\") + '-city');",
									"    pm.expect(address.zipCode).to.be.eq(pm.environment.get(\"seed\") + '-zipCode');",
									"    pm.expect(address.country).to.be.eq('Estonia');",
									"    pm.expect(address.province).to.be.eq(pm.environment.get(\"seed\") + '-province');",
									"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.eq(pm.environment.get(\"seed\") + '-company');",
									"    pm.expect(address.customAttributes.phone).to.be.eq(pm.environment.get(\"seed\") + '-phone');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "a8c89e6a-d5fa-469c-8774-8fa83f7f9d27",
					"name": "Make data blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Address successfully updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"\",\n    \"city\": \"\",\n    \"zipCode\": \"\",\n    \"country\": \"EE\",\n    \"province\":\"{{seed}}-province\",\n    \"customAttributes\": {\n        \"company\": \"\",\n        \"phone\": \"\"\n    }\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_update}}",
							"host": [
								"{{domain}}{{endpoint_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "5ae7dbb4-2bb4-4928-8a39-b55e20b9413c",
					"name": "Check fields are blank + clean",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5f55d33-740f-4926-ab78-f4fa3a883086",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly changed\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.id).to.be.a('number', 'Not a number provided!');",
									"    pm.expect(address.firstName).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.lastName).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.city).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.zipCode).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.country).to.be.eq('Estonia');",
									"    pm.expect(address.province).to.be.eq(pm.environment.get(\"seed\") + '-province');",
									"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.customAttributes.phone).to.be.a(\"string\").to.be.empty;",
									"});",
									"",
									"pm.environment.unset(\"seed\");",
									"pm.environment.unset(\"address-id\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "c4247eb8-965c-4baf-b53d-64bcc4ae11a4",
			"name": "deleteAddresses",
			"item": [
				{
					"_postman_id": "98e3e17b-693a-4cbe-ac7a-0c5d61b6755c",
					"name": "Prepare test data",
					"item": [
						{
							"_postman_id": "4956c802-8421-4a56-941f-03aae570c5a4",
							"name": "Fetch addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bd7d97c-2c92-4d2d-a675-2b7fd1e61792",
										"type": "text/javascript",
										"exec": [
											"var response = pm.response.json().addresses;",
											"// Set the overall number of addresses, the last test will check if this number decreased by two",
											"pm.environment.set(\"overallCountOfAddresses\", response.length);",
											"",
											"// Set the last three addresses, these both will be deleted in the next test",
											"const defaultAddress = response.filter(address => address.tags.includes(\"default\"));",
											"pm.environment.set(\"defaultAddressId\", defaultAddress.id);",
											"",
											"if (response.length > 1) {",
											"    pm.environment.set(\"firstAddressIdToDelete\", response[response.length-1].id);",
											"    pm.environment.set(\"secondAddressIdToDelete\", response[response.length-2].id);",
											"    pm.environment.set(\"thirdAddressIdToDelete\", response[response.length-3].id);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "013d52e4-a296-4084-876d-bead9cd3ab76",
							"name": "Create another address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n\t\t\"street1\": \"{{seed}}-street1\",\n        \"country\": \"US\",\n        \"province\":\"AZ\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "edea15f2-fd96-4115-8a93-62a057cc7a27",
							"name": "Get address ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "850afedf-01fe-490a-acba-b23102bac134",
										"type": "text/javascript",
										"exec": [
											"const response = pm.response.json();",
											"const address = response.addresses.pop();",
											"pm.environment.set(\"addressIdsToDelete\", pm.environment.get(\"addressIdsToDelete\") + \",\" + address.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "dd94e788-25c8-44db-8a51-17eeb0a9fd7b",
					"name": "Errors",
					"item": [
						{
							"_postman_id": "ffce4691-f4d9-4cc4-a6e4-06c89b6c97bc",
							"name": "Delete default address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58b53498-7367-430e-9b55-e88e32ee3fd4",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because the address is default\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t{{defaultAddressId}}\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "ec096a0a-8676-4044-9b8c-a2f83d8ea4d2",
							"name": "No address ids given",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36a7b895-7a66-44f5-81d3-ecc913e99f8d",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because no address ids were given\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "37c6715e-c6bc-41a5-816f-9cfc1a1adc23",
							"name": "Single with empty address id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b98ded50-bbd1-44c3-99c4-2fec94302266",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because an empty address id string was passed\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\"\"]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "e039dbfe-1fc1-45b1-9b1e-64b034ff382b",
							"name": "Multiple with empty address id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1c2f1f8-4259-4e35-beec-44daea50a3a2",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because no an empty address was passed, beside valid ones\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t{{firstAddressIdToDelete}},\n\t\t{{secondAddressIdToDelete}},\n\t\t{{thirdAddressIdToDelete}},\n\t\t\"\"\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "6ad9f357-949b-48fe-9151-1e4127866de7",
					"name": "Tests",
					"item": [
						{
							"_postman_id": "11e3fd48-703a-4916-994a-599def18c844",
							"name": "Delete multiple addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Addresses deleted and return is success true\", function () {",
											"    pm.expect(jsonData.success).to.be.eq(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t{{firstAddressIdToDelete}},\n\t\t{{secondAddressIdToDelete}},\n\t\t{{thirdAddressIdToDelete}}\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "7cc69707-a25c-4085-86d4-6ead77b01395",
							"name": "Check for deleted addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb1d6d7a-1cae-4781-966d-9539dc1067dd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Check if addresses were deleted\", function() {",
											"    var addresses = pm.response.json().addresses;",
											"",
											"    const filteredAddresses = addresses.filter(address => address.id === pm.environment.get(\"firstAddressIdToDelete\") || address.id === pm.environment.get(\"secondAddressIdToDelete\") || address.id === pm.environment.get(\"thirdAddressIdToDelete\"));",
											"    pm.expect(filteredAddresses).to.be.empty;",
											"})",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"_postman_id": "ae7f991c-8e18-4217-b269-75674c324673",
			"name": "Cleanup",
			"item": [
				{
					"_postman_id": "5a9b7753-1fd9-41b9-a5cd-513a249989d4",
					"name": "Cleanup test data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8755910-e295-4a63-8227-b7d4d7dcf516",
								"type": "text/javascript",
								"exec": [
									"// Cleanup environment vars",
									"pm.environment.unset(\"seed\");",
									"pm.environment.unset(\"overallCountOfAddresses\");",
									"pm.environment.unset(\"defaultAddressId\");",
									"pm.environment.unset(\"firstAddressIdToDelete\");",
									"pm.environment.unset(\"secondAddressIdToDelete\");",
									"pm.environment.unset(\"thirdAddressIdToDelete\");",
									"pm.environment.unset(\"addressIdsToDelete\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\": [\n\t\t{{addressIdsToDelete}}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_delete}}",
							"host": [
								"{{domain}}{{endpoint_addresses_delete}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
