{
	"info": {
		"_postman_id": "b48007f5-8be8-4e99-acc3-80de5783794c",
		"name": "Shopify Connect",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "1c9b16bd-4f32-4c69-811b-77fa6b05a456",
			"name": "Errors: unauthorized",
			"item": [
				{
					"_postman_id": "8aefdc1a-b263-4e96-8ec6-c41691af3c10",
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9cf418a-ecb3-4a21-91b5-b132c7c4ea7c",
								"type": "text/javascript",
								"exec": [
									"// doesn't matter if we succeed, this just clears previous states",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_logout}}",
							"host": [
								"{{domain}}{{endpoint_logout}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "ac6b407e-5f41-4682-be7f-ac998b8e3080",
					"name": "getUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot retrieve data\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "61d995b1-db70-4a78-b447-de0dab536317",
					"name": "getAddresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in, cannot get address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "32e7e959-1375-420e-a895-1226459f1bd1",
					"name": "addAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot add address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "bbb77ee5-7328-40cc-9b5c-4cb9d62821f8",
					"name": "updateAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannout update address\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\":\"1\"\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_update}}",
							"host": [
								"{{domain}}{{endpoint_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "0ee4eb6f-4cbd-4e1d-a5cf-c43008c156c5",
					"name": "deleteAddresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"User not logged in error, cannot delete addresses\", function () {",
									"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\": [\n\t\t\"1\"\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_delete}}",
							"host": [
								"{{domain}}{{endpoint_addresses_delete}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "ac0aace4-726b-4f23-9456-8149b0a85291",
			"name": "getUser",
			"item": [
				{
					"_postman_id": "6aa6f454-ac6f-45cb-baab-e81be44fd101",
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"strategy\": \"basic\",\n\t\"parameters\": {\n\t\t\"login\": \"{{username}}\",\n\t\t\"password\": \"{{password}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_login}}",
							"host": [
								"{{domain}}{{endpoint_login}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "d45412bf-da7c-41d1-b57b-8b6375d743e4",
					"name": "getUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.with.body;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response have minimum return values\", function() {",
									"    var response = pm.response.json()",
									"    pm.expect(response.id).to.not.be.empty;",
									"    pm.expect(response.firstName).to.not.be.empty;",
									"    pm.expect(response.lastName).to.not.be.empty;",
									"    pm.expect(response.mail).to.not.be.empty;",
									"    pm.response.to.not.have.jsonBody(\"addresses\");",
									"})",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_user_get}}",
							"host": [
								"{{domain}}{{endpoint_user_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "3bbd174d-75e4-4894-8df3-a93cdd92cdb9",
			"name": "addAddress",
			"item": [
				{
					"_postman_id": "daf12579-15a8-4f31-9c42-bd6f6d17c735",
					"name": "Errors",
					"item": [
						{
							"_postman_id": "5ff20573-0145-4255-b59a-4e22be110f3e",
							"name": "missing address data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Correct missing address error is thrown\", function () {",
											"    pm.expect(jsonData.error.message).to.be.eq('Empty address data.');",
											"    pm.expect(jsonData.error.code).to.be.eq('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "3384b599-6f65-475f-95f8-e41c53a74ae0",
							"name": "bad country name",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct country error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"TESTER\" is not a valid country');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"country\": \"TESTER\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "701e347a-6c44-4dcf-9703-40191a5a3741",
							"name": "country is required",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct country error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"Country\" is required');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"province\":\"{{seed}}-province\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "de05f23f-e323-4c1f-b664-026dd7350bdd",
							"name": "incorrect province",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Incorrect validation error structure\", function () {",
											"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
											"    jsonData.error.validationErrors.forEach((error) => {",
											"        pm.expect(error.path).to.not.be.empty;",
											"        pm.expect(error.message).to.not.be.empty;",
											"    })",
											"});",
											"",
											"pm.test(\"Correct province error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('province');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"Province\" is not valid');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"country\": \"US\",\n        \"province\":\"{{seed}}-province\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "13fe1bba-ce64-403d-afa3-4582ccb7d5de",
							"name": "Create GB address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"street1\": \"TEST ADDRESS\",\n        \"country\": \"GB\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "0aa7da74-9b95-4ad7-8fdb-dac50c66659e",
							"name": "Get address ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a91dbc1-ad95-4997-b170-7655199bf6b7",
										"type": "text/javascript",
										"exec": [
											"const response = pm.response.json();",
											"const address = response.addresses.pop();",
											"var addressIdsToDelete = [];",
											"addressIdsToDelete.push(address.id);",
											"pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "18f2a979-53af-45b0-989e-5570d6836140",
							"name": "Add duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
											"});",
											"",
											"pm.test(\"Correct duplicate error is shown\", function () {",
											"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('street1');",
											"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"Street1\" has already been taken');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n        \"street1\": \"TEST ADDRESS\",\n        \"country\": \"GB\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "85b368e5-b053-4f59-9aec-42aa96f2ac2e",
					"name": "Add: all field mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\",\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\"\n        }\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "9ed13152-93d1-49bc-a68e-3d33b3bcd51f",
					"name": "Get: check all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36ca1a1a-c71e-41c3-b3e7-1342bb462383",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.id).to.be.a('number', 'Not a number provided!');",
									"    pm.expect(address.firstName).to.be.eq(pm.environment.get(\"seed\") + '-firstname');",
									"    pm.expect(address.lastName).to.be.eq(pm.environment.get(\"seed\") + '-lastname');",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.eq(pm.environment.get(\"seed\") + '-street2');",
									"    pm.expect(address.city).to.be.eq(pm.environment.get(\"seed\") + '-city');",
									"    pm.expect(address.zipCode).to.be.eq(pm.environment.get(\"seed\") + '-zipCode');",
									"    pm.expect(address.country).to.be.eq('United States');",
									"    pm.expect(address.province).to.be.eq('Arizona');",
									"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.eq(pm.environment.get(\"seed\") + '-company');",
									"    pm.expect(address.customAttributes.phone).to.be.eq(pm.environment.get(\"seed\") + '-phone');",
									"",
									"    var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
									"    addressIdsToDelete.push(address.id);",
									"    pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "ae452726-9385-4818-916f-f07d14c1421e",
					"name": "Province: Arizona",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e868c823-f86b-432b-a7a5-2fb04a45a6a2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0dac9877-31f4-4c5a-b61c-023afb4f3e70",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"street1\": \"{{seed}}-street1\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "9fbcfeb5-1fa2-4ba8-83b8-f8b75ca8647a",
					"name": "Get: check province",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "147d2b27-1b15-458e-be01-a9a0f356efb6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.province).to.be.eq('Arizona');",
									"    pm.expect(address.provinceCode).to.be.eq('AZ');",
									"    ",
									"    var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
									"    addressIdsToDelete.push(address.id);",
									"    pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "5713e898-d6fb-496b-bb01-911f8c63c406",
					"name": "ProvinceCode: Texas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2883e3d5-ac37-4900-b793-94def3e34b83",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b2b11ad-742b-47da-9590-0a3f1ae8b3bb",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"street1\": \"{{seed}}-street1\",\n        \"country\": \"US\",\n        \"province\":\"TX\"\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "b07aee37-be8b-4693-8f76-6c884e81a3c8",
					"name": "Get: check province by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e744be76-6e39-4997-a361-70a78fcd2204",
								"type": "text/javascript",
								"exec": [
									"var response = pm.response.json().addresses;",
									"",
									"pm.test(\"Make sure all address data was properly set\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.province).to.be.eq('Texas');",
									"    pm.expect(address.provinceCode).to.be.eq('TX');",
									"    ",
									"    var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
									"    addressIdsToDelete.push(address.id);",
									"    pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "4056344c-d493-4c5b-bc09-5595d096b2b1",
			"name": "updateAddress",
			"item": [
				{
					"_postman_id": "f9824976-35af-4c71-bd6d-f79d32e21dd6",
					"name": "Errors",
					"item": [
						{
							"_postman_id": "410308b6-a2bb-426c-9140-ee91d3514351",
							"name": "General",
							"item": [
								{
									"_postman_id": "ff432f33-5477-4734-917d-5765899fcf38",
									"name": "Add: all field mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"company\": \"{{seed}}-company\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"phone\": \"{{seed}}-phone\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\"\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "a4c0f0c3-110d-4ac4-8873-df85db4701e0",
									"name": "Get address ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a52f9daf-4542-4818-8d40-62ee5f6e3a98",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Addresses are returned\", function () {",
													"    const response = pm.response.json();",
													"    const address = response.addresses.pop();",
													"    pm.environment.set(\"address-id\", address.id);",
													"});",
													"",
													"const response = pm.response.json();",
													"const address = response.addresses.pop();",
													"var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
													"addressIdsToDelete.push(address.id);",
													"pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_addresses_get}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "96e58394-5755-47fa-9a8c-6f157afcdb6d",
									"name": "bad country name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test(\"Incorrect validation error structure\", function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    })",
													"});",
													"",
													"pm.test(\"Correct country error is shown\", function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
													"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"TESTER\" is not a valid country');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"country\": \"TESTER\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_update}}",
											"host": [
												"{{domain}}{{endpoint_address_update}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "0f57d7e2-7230-426c-bbc7-a32f09c22bc0",
									"name": "incorrect province",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ca6c558-595c-4d28-ac3f-5bb784ac6ad5",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test(\"Incorrect validation error structure\", function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    })",
													"});",
													"",
													"pm.test(\"Correct province error is shown\", function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('province');",
													"    pm.expect(jsonData.error.validationErrors[0].message).to.be.eq('\"' + pm.environment.get(\"seed\") + '-province\" is not valid');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"country\": \"IT\",\n    \"province\":\"{{seed}}-province\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_update}}",
											"host": [
												"{{domain}}{{endpoint_address_update}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "277a7b20-586e-4a6f-8e51-67694a1c0206",
									"name": "Address not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Incorrect address ID provided\", function () {",
													"    pm.expect(jsonData.error.code).to.be.eq('EINVALIDCALL');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"0\",\n    \"country\": \"IT\",\n    \"province\":\"{{seed}}-province\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_update}}",
											"host": [
												"{{domain}}{{endpoint_address_update}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "46502046-9bb1-421e-a6b2-ee87f30ad982",
					"name": "Add: all field mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"Arizona\",\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\"\n        }\n\t}\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_add}}",
							"host": [
								"{{domain}}{{endpoint_address_add}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "f6ae5305-eb0d-41ff-a1c2-1327fb3877b3",
					"name": "Get address ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fd3470d-29fe-45a9-b7ce-5dd6020a92e8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Addresses are returned\", function () {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.environment.set(\"address-id\", address.id);",
									"    ",
									"    var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
									"    addressIdsToDelete.push(address.id);",
									"    pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "f0b9f050-1c41-4c76-8de6-1fea4c898832",
					"name": "Change all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8dd06eb-2165-4f11-8efd-453643322bae",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Address successfully updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f690a69f-a8f8-4958-a885-ceb326e6935d",
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"firstName\": \"{{seed}}-firstname\",\n    \"lastName\": \"{{seed}}-lastname\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"{{seed}}-street2\",\n    \"city\": \"{{seed}}-city\",\n    \"zipCode\": \"{{seed}}-zipCode\",\n    \"country\": \"EE\",\n    \"province\":\"{{seed}}-province\",\n    \"customAttributes\": {\n        \"company\": \"{{seed}}-company\",\n        \"phone\": \"{{seed}}-phone\"\n    }\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_update}}",
							"host": [
								"{{domain}}{{endpoint_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "019bfe85-1572-4602-9094-34852c453710",
					"name": "Get: check all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17f771f8-7752-4c3e-bed4-4d1ff520dba1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly changed\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.id).to.be.a('number', 'Not a number provided!');",
									"    pm.expect(address.firstName).to.be.eq(pm.environment.get(\"seed\") + '-firstname');",
									"    pm.expect(address.lastName).to.be.eq(pm.environment.get(\"seed\") + '-lastname');",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.eq(pm.environment.get(\"seed\") + '-street2');",
									"    pm.expect(address.city).to.be.eq(pm.environment.get(\"seed\") + '-city');",
									"    pm.expect(address.zipCode).to.be.eq(pm.environment.get(\"seed\") + '-zipCode');",
									"    pm.expect(address.country).to.be.eq('Estonia');",
									"    pm.expect(address.province).to.be.eq(pm.environment.get(\"seed\") + '-province');",
									"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.eq(pm.environment.get(\"seed\") + '-company');",
									"    pm.expect(address.customAttributes.phone).to.be.eq(pm.environment.get(\"seed\") + '-phone');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "bd0d2bd3-4ae5-4f16-ba13-e711b56df987",
					"name": "Make data blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Address successfully updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Create a seed to have a randomized data set",
									"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{address-id}}\",\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"\",\n    \"city\": \"\",\n    \"zipCode\": \"\",\n    \"country\": \"EE\",\n    \"province\":\"{{seed}}-province\",\n    \"customAttributes\": {\n        \"company\": \"\",\n        \"phone\": \"\"\n    }\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_address_update}}",
							"host": [
								"{{domain}}{{endpoint_address_update}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "4cf14354-7143-4d0a-ab6f-589a0e7d7693",
					"name": "Check fields are blank + clean",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5f55d33-740f-4926-ab78-f4fa3a883086",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Make sure all address data was properly changed\", function() {",
									"    const response = pm.response.json();",
									"    const address = response.addresses.pop();",
									"    pm.expect(address.id).to.be.a('number', 'Not a number provided!');",
									"    pm.expect(address.firstName).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.lastName).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
									"    pm.expect(address.street2).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.city).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.zipCode).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.country).to.be.eq('Estonia');",
									"    pm.expect(address.province).to.be.eq(pm.environment.get(\"seed\") + '-province');",
									"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
									"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
									"    pm.expect(address.customAttributes.company).to.be.a(\"string\").to.be.empty;",
									"    pm.expect(address.customAttributes.phone).to.be.a(\"string\").to.be.empty;",
									"});",
									"",
									"pm.environment.unset(\"seed\");",
									"pm.environment.unset(\"address-id\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_get}}",
							"host": [
								"{{domain}}{{endpoint_addresses_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "2284ac33-54a0-418c-a2ed-2f5b3f803950",
			"name": "deleteAddresses",
			"item": [
				{
					"_postman_id": "b612aebd-1574-4f4d-aaeb-14849e8f29dd",
					"name": "Prepare test data",
					"item": [
						{
							"_postman_id": "f3eb6a91-e25b-41c2-b0c2-2439017b2945",
							"name": "Fetch addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2961bf4-81a5-495f-9e89-e667a2196cdf",
										"type": "text/javascript",
										"exec": [
											"var response = pm.response.json().addresses;",
											"// Set the overall number of addresses, the last test will check if this number decreased by two",
											"pm.environment.set(\"overallCountOfAddresses\", response.length);",
											"",
											"// Set the last three addresses, these both will be deleted in the next test",
											"pm.environment.set(\"defaultAddressId\", response[0].id);",
											"",
											"if (response.length > 1) {",
											"    pm.environment.set(\"firstAddressIdToDelete\", response[response.length-1].id);",
											"    pm.environment.set(\"secondAddressIdToDelete\", response[response.length-2].id);",
											"    pm.environment.set(\"thirdAddressIdToDelete\", response[response.length-3].id);",
											"}",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "2a04ae75-c0fa-419d-b412-f69609a64e82",
							"name": "Create another address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n\t\t\"street1\": \"{{seed}}-street1\",\n        \"country\": \"US\",\n        \"province\":\"AZ\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "04bbc16a-2ee7-46d5-b1fe-e3a929fc717a",
							"name": "Get address ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10b40008-18ea-40f9-b06f-faf414b3ca4c",
										"type": "text/javascript",
										"exec": [
											"const response = pm.response.json();",
											"const address = response.addresses.pop();",
											"var addressIdsToDelete = pm.environment.get(\"addressIdsToDelete\").split(\",\");",
											"addressIdsToDelete.push(address.id);",
											"pm.environment.set(\"addressIdsToDelete\", addressIdsToDelete.join());"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "4dee7d25-b407-427f-8691-44f389c18716",
					"name": "Errors",
					"item": [
						{
							"_postman_id": "c1cbf987-3ce5-4cb8-a8a7-4b9ed397475b",
							"name": "Delete default address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58b53498-7367-430e-9b55-e88e32ee3fd4",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because the address is default\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t{{defaultAddressId}}\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "18f60491-dd55-4513-81b2-0758909c53d3",
							"name": "No address ids given",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36a7b895-7a66-44f5-81d3-ecc913e99f8d",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Code is EINVALIDCALL because no address ids were given\", function () {",
											"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "869ca474-137d-461d-9584-22b9c140d9ed",
					"name": "Tests",
					"item": [
						{
							"_postman_id": "b03ff636-5683-47f8-a1e8-5f6f72154f2f",
							"name": "Delete multiple addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Addresses deleted and return is success true\", function () {",
											"    pm.expect(jsonData.success).to.be.eq(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t{{firstAddressIdToDelete}},\n\t\t{{secondAddressIdToDelete}},\n\t\t{{thirdAddressIdToDelete}}\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "78104eab-d57f-4f7e-8d1f-b82d1c7affc9",
							"name": "Check for deleted addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0802ca0-49a6-4c66-a968-d0a0540806e9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Check if addresses were deleted\", function() {",
											"    var addresses = pm.response.json().addresses;",
											"",
											"    const filteredAddresses = addresses.filter(address => address.id === pm.environment.get(\"firstAddressIdToDelete\") || address.id === pm.environment.get(\"secondAddressIdToDelete\") || address.id === pm.environment.get(\"thirdAddressIdToDelete\"));",
											"    pm.expect(filteredAddresses).to.be.empty;",
											"})",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"_postman_id": "469c0d66-b356-4a37-a914-32c11e6ed6cc",
			"name": "Cleanup",
			"item": [
				{
					"_postman_id": "80c39529-123a-4cf6-8a94-67fd26d3f70d",
					"name": "Cleanup test data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86f7696f-5d60-4da5-aa93-08e5a6606826",
								"type": "text/javascript",
								"exec": [
									"// Cleanup environment vars",
									"pm.environment.unset(\"seed\");",
									"pm.environment.unset(\"overallCountOfAddresses\");",
									"pm.environment.unset(\"defaultAddressId\");",
									"pm.environment.unset(\"firstAddressIdToDelete\");",
									"pm.environment.unset(\"secondAddressIdToDelete\");",
									"pm.environment.unset(\"thirdAddressIdToDelete\");",
									"//pm.environment.unset(\"addressIdsToDelete\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ids\": [\n\t\t{{addressIdsToDelete}}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_addresses_delete}}",
							"host": [
								"{{domain}}{{endpoint_addresses_delete}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
